########enums:
regressionType: type of regression being used
  -linear (normal error model)
  -logistic (binomial model)

  new version
  - regressionType -> generalizedLinearModelType
  - NORMAL (formerly linear)
  - BINOMIAL (formerly logistic)
  - GAMMA (new)
  - POISSON (new)
  - MULTINOMIAL (new)
  - INVERSEGAUSSIAN (new)


scalingType: whether or not to scale the columns of the predictor matrix to have unit variance and zero mean
  -SCALE
  -NOSCALE

  new version
  - deprecated, stored as an integer variable in the control parameter structure instead (scaleFeatureMatrix)

estimationType: whether or not to do Bayesian model averaging or whether to take the maximum identified lower bound
  -BMA
  -MAXIMAL

  new version
  estimationType: modelSpaceSelection
  -BMA (do approximate Bayesian model averaging)
  -MAXMIAL (return best result identified)
  -FULL (return full set of unique solutions identified)

errorType: whether or not to use KL divergence choice of l0
  -KL
  -NOKL

  new version
  - deprecated

bmaType: whether to do approximate or full variance correction on Bayesian Model averaging
  -APPR
  -EXACT

  new version
  - deprecated, stored as an integer variable in control parameter struct (applyBMAcovarianceCorrection)


########Structs:

matrix_v: a struct used to define the base of a matrix representation as a vector of vectors for a double matrix
  -double * col (has one element that is a pointer to a double)

  new version
  -matrix_v -> doubleColumnVector
  -col - column


matrix_i: a struct used to define the base of a matrix representation as a vector of vectors for an integer matrix
  -int * col (has one element that is a pointer to an int)

  new version
  -matrix_i -> integerColumnVector
  -col -> column

control_param_struct: a data structure that contains all the relevant parameter settings to control the model state.  These include
  - double eps (precision for convergence criteria)
  - double * l0_path (a pointer to a vector of l0 penalty parameters)
  - double * pb_path (a pointer to a vector of probability representation of l0_path)
  - int * exclude (a pointer to a vector which is 0 if a variable is penalized and 1 otherwise)
  - double * penalty_factor (a pointer to a vector which allows for optional rescaling of predictors)
  - int maxit (maximum iterations to run the algorithm)
  - int path_length (length of the path)
  - int n_orderings (number of restarts)
  - regressionType regressType (type of regression that is being run)
  - scalingType scaleType (whether or not to scale columns)
  - estimationType estType (whether or not to do Bayesian Model Averaging)
  - errorType errType (whether or not to do 1se + KL min on path of l0 param)
  - bmaType bType (whether or not to do exact or approximate b.m.a.)
  - kl_percentile (which percentile of null distributed features to use for kl test)
  - int total_replicates (path_length * n_orderings)

  new version
  control_param_struct -> controlParameterSettings
  -eps -> epsilon
  -l0_path -> l0Vector
  -pb_path -> priorProbabilityVector
  -exclude -> penalizeVariable
  -penalty_factor -> featureColumnScalingFactor
  -maxit -> maximumIterations
  -path_length -> l0VectorLength
  -n_orderings -> numberOfRandomRestarts
  -regressType -> generalizedLinearModelUsed
  -scalingType -> scaleFeatureMatrix
  -estType -> modelSpaceSelectionUsed
  -bType -> applyBmaCovarianceCorrection
  -kl_percentile -> removed
  -total_replicates -> totalModelFits


model_param_struct: a data structure that contains all the relevant model parameters describing the state of a given run of the vbsr algorithm
  - double * beta_mu (a pointer to a vector which defines the mean parameter from the posterior distribution over beta)
  - double * beta_sigma (a pointer to a vector which defines the variance parameter from the posterior distribution over beta)
  - double * beta_chi (a vector of beta_mu^2/beta_sigma)
  - double * beta_p (a vector of posterior probability estimates for beta)
  - double * e_beta (expectation of beta)
  - double * e_beta_sq (expectation of beta^2)
  - double sigma_e (error variance parameter)
  - double lb (lower bound)
  - double p_sums (sum of the probabilities)
  - double entropy (entropy correction factor used to produce the lower bound estimate)
  - double v_sums_correct (correction factor to compute expectation of complete log likelihood, U potential)
  - double * w_vec (weights for IRLS algorithm for logistic regression)
  - double * mu_vec (prediciton values from IRLS algorithm for logistic regression)
  - double * resid_vec (residual vector)
  - double * pred_vec_old (old prediction vector for irls logistic regression)
  - double * pred_vec_new (new prediction vector for irls logistic regression)
  - double * x_w (reweightings from irls logistic regression)
  - int ord_index (ordering of current model_param)
  - int path_index (path index of current model_param)

data_struct: a data structure that contains all of the fixed data variables
  - struct matrix_v * X (a pointer to a vector of matrix_v struct pointers)
  - double * y (a pointer to a vector of response variables)
  - double var_y (the variance of y)
  - int n (sample size)
  - int m (number of predictors)
  - int p (number of unpenalized variables)
  - double * x_sum_sq (a pointer to a vector of the sum of squares of the predictor matrix)
  - struct matrix_i * ordering ( a pointer to a vector of matrix_i struct pointers)
  - double * one_vec (a pointer to a vector of length n ones)

order_struct: a data structure that contains all the model parameters for a given ordering of the predictors in X
  - struct model_param_struct * model_param (a pointer to a model param struct pointer)

model_struct: a single data structure that contains all the control parameters, model parameters, and data for a given run of the vbsr algorithm
  -struct control_param_struct control_param (a control param struct)
  -data_struct data (the data for a given model)
  - order_struct * order (a pointer to a order_struct that contains all the model parameters across orderings)

control_param_marg (control parameters for marginal analysis)

model_param_marg (model parameters for marginal analysis)

model_marg_struct (overall structure for marginal analysis)


###############functions:

void identify_unique (identify unique models based on lower bound values)
  INPUTS
  -double * lb_t (a pointer to a vector of lower bound values)
  -double * post_p (a pointer to a vector of model posterior proabilities, updated by the function)
  -int n (number of models being considered)
  -double tol (tolerance of comparison)
  OUTPUTS
  none

double * xc (utility function that returns the pointer that points to column j of the data matrix)
  INPUTS
  struct model_struct * model (a pointer to the model struct with the data in it)
  int j (the jth index of that column)
  OUTPUTS
  returns a pointer to a vector of doubles

double xcm same as xc(), but for marginal analysis

double * oc (utility function that returns the pointer to column j of the ordering matrix)
  INPUTS
  struct model_struct * model (a pointer to the model struct with all the data in it)
  int j (the index variable)
  OUTPUTS
  returns a pointer to a vector of ints

model_param_struct * me (utility to extract the model parameter state when indexing over the the orderings and the path of l0)
  INPUTS
  model_struct * model (a pointer to the current model struct)
  int i (index of ordering)
  int j (index of l0 path)
  OUTPUTS
  returns a pointer to a model_param_struct for the appropriate state (ordering and l0)

void initialize_model_param (initialize the model parameters for each ordering and each l0 value)
  INPUTS
  -int n (sample size)
  -int m (number of columns of predictor matrix)
  -int i (index of ordering)
  -int j (index of l0 path)
  -struct model_struct * model (pointer to overall model)
  -double * y (pointer to response vector)
  -double var_y (variance of response vector)
  OUTPUTS
  none

void free_model_param (function to free all memory allocations for model parameters)
  INPUTS
  -model_struct * model (pointer to overall model)
  int i (index of ordering)
  int j (index of l0 path)
  OUTPUTS
  none

void ddot_w (wrapper for dot product)
  INPUTS
  int n (length of vectors)
  double * vect1 (pointer to a vector of doubles)
  double * vect2 (pointer to a vector of doubles)
  double * result (pointer to a double that will contain the result)
  OUTPUTS
  none

void daxpy_w (wrapper for y <- ax+y)
  INPUTS
  int n (length of vectors)
  double * x (pointer to a vector of doubles of length n)
  double * y (pointer to a vector of doubles of length n)
  double alpha
  OUTPUTS
  none

void dnrm2_w (wrapper for the l2 norm function: sqrt(x' x))
  INPUTS
  int n (length of vectors)
  double * x (pointer to a vector of doubles of length n)
  double * result (pointer to a double that will contain the result)
  OUTPUTS
  none

void dscal_w (wrapper to scale a vector by a constant: x <- alpha*x)
  INPUTS
  int n (length of vectors)
  double * x (pointer to a vector of doubles of length n)
  double alpha (double containing the scaling factor)
  OUTPUS
  none

void scale_vector (wrapper to center and scale a vector: vec)
  INPUTS
  double * vec (pointer to a vector doubles of length n)
  double * ones (pointer to a vector of ones of length n)
  int n (length of vectors)
  OUTPUTS
  none

void cor (wrapper to compute the correlation between two vectors)
  INPUTS
  double * vec1 (pointer to a vector of doubles of length n)
  double * vec2 (pointer to a vector of doubles of length n)
  double * ones (pointer to a vector of ones of length n)
  double * corv (pointer to a double that stores the result)
  OUTPUTS
  none


double compute_ssq (wrapper to compute the sum of squares)
  INPUTS
  double * vec (pointer to a vector of doubles of length n)
  int n (length of vector)
  OUTPUTS
  none

void initialize_model (function that takes all the inputs passed from R and initializes the model state)
  INPUTS
  double * eps (pointer to the precision of convergence tolerance)
  double * l0_path (pointer to a vector of l0 values)
  double * pb_path (pointer to a vector of prior probability values)
  int * exclude (pointer to a vector of ints that determine whether or not to penalize a variable)
  double * penalty_factor (pointer to a vector of doubles that specifies if the columns should be scaled by a corresponding factor)
  int * maxit (pointer to the maximum iterations to allow)
  int * path_length (pointer to how many l0 values to go over)
  int * n_orderings (pointer to how many orderings to run)
  int * regress (pointer to an int indicating the regression type)
  int * scale (pointer to an int indicating whether to scale columns)
  int * est (pointer to an int indicating which estimationType)
  int * error (pointer to an int indicating which errorType)
  double * kl (??)
  int * approx (pointer to an int indicating which bmaType)
  int * total_replicates (pointer to an int which is path_length*n_orderings)
  double * X (pointer to a vector of doubles of the data matrix in column major form)
  double * y (pointer to a vector of doubles of the response)
  double * var_y (pointer to a double of the variance of y)
  int * n (pointer to an int indicating the number of samples)
  int * m (pointer to an int indicating the number of features)
  int * ordering_mat (pointer to a vector of doubles of the ordering matrix in column major form)
  struct model_struct * model (pointer to the model struct where all the results will be stored)
  OUTPUTS
  NONE


void initialize_model_marg (function to initialize the parameters for the marginal model)
  INPUTS
  double * eps (convergence criteria)
  double * exclude (which to penalize-> I think this is all)
  double * maxit (maximum iterations)
  double * regress (regresison type)
  double * X (data matrix)
  double * y (response vector)
  double * var_y (variance of y)
  int * n (number of samples)
  int * m (number of features)
  struct model_marg_struct * model (pointer to marginal model structure)

void free_model (function to free model parameters)
  INPUTS
  struct model_struct * model (pointer to model struct)

void free_model_marg (function to free marginal model parameters)
  INPUTS
  struct model_marg_struct *model (pointer to marginal model struct)

void process_data (function to potentially scale data and compute sum of squared columns of data matrix)
  INPUTS
  model_struct * model (pointer to model struct)

void process_data_marg (function to potentially scale data and compute sum of squared columns of data matrix for marginal model)
  INPUTS
  model_marg_struct * model (pointer to model struct)

void copy_model_state (function to copy the model state between l0 paths for a given ordering)
  INPUTS
  model_struct * model (pointer to model struct)
  int i (ordering index)
  int j (l0_path index)

void update_beta (function to update the beta parameters of the model)
  INPUTS
  model_struct * model (pointer to model struct)
  int i (ordering index)
  int j (l0_path index)


void update_beta_marg (function to update the beta parameters of the marginal model)
  INPUTS
  model_struct * model (pointer to model struct)
  int * use_vec (pointer to index vector of lenth cv that indicates which columns of the data matrix to use)
  int cv (total number of covariates)

void update_error (function to update the error parameter of the model)
  INPUTS
  model_struct * model (pointer to model struct)
  int i (ordering index)
  int j (l0 path index)

void update_error_marg (function to update the error parameter of the marginal model)
  INPUTS
  model_marg_struct * model (pointer to model struct)

void update_lb (function to update the lower bound of the model)
  INPUTS
  model_struct * model (pointer to model)
  int i (ordering index)
  int j (path index)

void update_lb_marg (function to update the likelihood of the marginal model)
  INPUTS
  model_marg_struct * model (pointer to model)

void run_vbsr (function to run the vbsr algorithm across all orderings and l0 parameters)
  INPUTS
  model_struct * model (pointer to model)

void run_marg (function to run the marginal model)
  INPUTS
  model_marg_struct * model (pointer to marginal model)


void compute_bma_correct (function to compute the BMA variance correction for the z statistics)
  INPUTS
  model_struct * model
  int k (index for the column of X)
  double * post_prob (pointer to a vector of doubles for the model posterior probabilities)
  double * s_bma (pointer to double containing the variance correction for the kth statistic)
  int j (index for the l0 path)


void collapse_results (function to migrate the results from the model struct into the vector that are natively stored in R)
  INPUTS
  struct model_struct * model
  double * beta_chi_mat (z statistic matrix)
  double * beta_mu_mat (beta mu matrix)
  double * beta_sigma_mat (beta sigma matrix)
  double * e_beta_mat (expected value of beta matrix)
  double * beta_p_mat (posterior probability matrix of the individual betas)
  double * lb_mat (lower bound vector)
  double * kl_mat (kullback leibler divergence matrix)

void collapse_results_marg (function to migrate the results from the model struct into the vectors that are natively stored in R)
  INPUTS
  struct model_marg_struct * model
  double * beta_chi (z statistic)
  double * beta_mu (beta estimate)
  double * beta_sigma (variance estimate)
  double * beta_p (posterior probability)
  double *lb (log likelihood)


void run_marg_analysis (function to run the full marginal analysis, taking the paramters passed in from R, creating the internal structs, running the algorithm, and returning the results)
  INPUTS
  double * eps (tolerance convergence threshold)
  int * exclude (vector of inclusions)
  int * maxit (maximum iterations)
  int * regress (regression type)
  int * scale (scaling type)
  double * X (data matrix)
  double * y (response vector)
  int * n (sample size)
  int * m (number of features)
  double * beta_chi (result vector for z statistics)
  double * beta_mu (result vector for effect estimates)
  double * beta_sigma (result vector for variance of effect estimates)
  double * beta_p (result vector for posterior probabilities)
  double * lb (log likelihood)

void run_vbsr_wrapper
  INPUTS
  double * eps (tolerance convergence threshold)
  double * l0_path (l0 path parameter)
  double * pb_path (prior probability path)
  int * exclude (whether or not to penalize)
  double * penalty_factor (column specific scaling factor)
  int * maxit (maximum iterations)
  int * path_length (number of l0 paramters)
  int * n_orderings (number of re-orderings)
  int * regress (regression type)
  int * scale (scaling type)
  int * est (estimation type)
  int * error (error model type)
  double * kl (kullback leibler nonsense)
  int * approx (whether or not to do BMA correction)
  int * total_replicates (path_length*n_orderings)
  double * X (data matrix)
  double * y (response vector)
  double * var_y (variance of y)
  int * n (sample size)
  int * m (number of features)
  int * ordering_mat (ordering matrix)
  double * beta_chi_mat (result matrix for z statistics)
  double * beta_mu_mat (result matrix for beta mean statistics)
  double * beta_sigma_mat (result matrix for beta variance statistics)
  double * e_beta_mat (result matrix for expectations)
  double * beta_p_mat (result matrix for posterior probabilities)
  double * lb_mat ( result matrix for lower bound)
  double * kl_mat ( result matrix for kl divergence estimates)
  int * nthreads (number of threads for multi threading)
